# 项目生成要求
做一个用户管理系统，提供完整的用户注册、登录、管理功能。

## 项目概述
要求基于Node.js + Express + 飞书多维表格 + Vue.js的项目

## 技术栈
- **后端**: Node.js + Express + 飞书多维表格API
- **前端**: Vue.js + Vue Router + Vuex
- **认证**: JWT (JSON Web Token)
- **数据库**: 飞书多维表格
- **其他**: bcryptjs (密码加密)、cors (跨域处理)、@larksuiteoapi/node-sdk (飞书SDK)、joi (数据验证)

## 资源结构
- 用户（User）：id、用户名、密码

## API接口
- 获取所有用户（GET /users）
- 获取单个用户（GET /users/:id）
- 创建用户（POST /users）
- 更新用户（PUT /users/:id）
- 删除用户（DELETE /users/:id）

## 数据库
- 用飞书多维表格作为数据库。

## 关于飞书多维表格
- 请参考官方文档：多维表格的使用，请参考官方文档：URL_ADDRESS.feishu.cn/document/uAjLw4CM/ukTMukTMukTM/reference/bitable-v1/app-table-records

## 以下是飞书多维表格的一些使用说明
- API调用说明.md（里面是请求示例）
- NodeSDK.md(里面记录了多维表格的数据和参数，使用方法等，可以直接提取参数)
- .env文件的配置参数直接在SDK中提取

## 技术要点
- 访问凭证机制 ：飞书API使用tenant_access_token进行身份验证，该token需要通过app_id和app_secret动态获取
- Token有效期 ：tenant_access_token有2小时的有效期，需要动态刷新
- SDK配置 ：直接从NodeSDK示例代码中提取配置参数，确保配置的准确性

## 代码规范
- 使用ES6语法
- 使用async/await处理异步操作
- 使用Joi进行数据验证

## 前端的要求
- 使用Vue.js框架
- 使用Vuex进行状态管理
- 使用Vue Router进行路由管理
- 使用Element UI作为UI组件库
- 使用Axios进行HTTP请求

## 前后端进行对接
- 前端向后端发送HTTP请求
- 后端接收请求并处理
- 后端将处理结果返回给前端

请根据以上要求，生成符合规范的RESTful API代码。